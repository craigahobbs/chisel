# -*- makefile-gmake -*-
# Copyright (C) 2012-2017 Craig Hobbs
#
# Licensed under the MIT License
# https://github.com/craigahobbs/chisel/blob/master/LICENSE

ifeq '$(PACKAGE_NAME)' ''
    $(error PACKAGE_NAME is not defined!)
endif

# Build directories
BUILD := build
BUILD_COV := $(BUILD)/coverage
BUILD_DOC := doc/_build
BUILD_ENV := $(BUILD)/env
BUILD_SYS := $(BUILD)/sys

# Helper functions
LOWER_FN = $(eval $(call LOWER_FN_CACHE, $(1)))$(__LOWER_FN__$(strip $(1))__)
UPPER_FN = $(eval $(call UPPER_FN_CACHE, $(1)))$(__UPPER_FN__$(strip $(1))__)
define LOWER_FN_CACHE
ifndef __LOWER_FN__$(strip $(1))__
__LOWER_FN__$(strip $(1))__ := $$(shell echo '$(strip $(1))' | tr '[:upper:]' '[:lower:]')
endif
endef
define UPPER_FN_CACHE
ifndef __UPPER_FN__$(strip $(1))__
__UPPER_FN__$(strip $(1))__ := $$(shell echo '$(strip $(1))' | tr '[:lower:]' '[:upper:]')
endif
endef

# Python version support
ifndef PYTHON_URLS
PYTHON_URLS := \
    https://www.python.org/ftp/python/3.5.3/Python-3.5.3.tgz \
    https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz \
    https://www.python.org/ftp/python/3.4.6/Python-3.4.6.tgz \
    $(PYTHON_URLS_EXTRA)
endif

PYTHON_NAME_FN = $(call UPPER_FN, $(subst -,_,$(subst .,_,$(basename $(notdir $(1))))))

# OS helpers
OS_MAC := $(findstring Darwin, $(shell uname))

.PHONY: help
help: _help

.PHONY: _help
_help:
	@echo 'usage: make [build|test|cover|doc|pylint|commit|clean|superclean|setup]'

.PHONY: commit
commit: pylint test doc cover

.PHONY: clean
clean: _clean

.PHONY: _clean
_clean:
	rm -rf \
		$(BUILD) \
		$(BUILD_DOC) \
		.coverage \
		.makefile \
		$$(find $(PACKAGE_NAME) -name '__pycache__') \
		build \
		dist \
		*.egg-info \
		*.egg

.PHONY: superclean
superclean: clean _superclean

.PHONY: _superclean
_superclean:
	rm -rf \
		$(BUILD_SYS)

.PHONY: setup
setup: _setup

.PHONY: _setup
_setup:
ifneq '$(OS_MAC)' ''
	brew install \
		openssl \
		homebrew/dupes/zlib
else
	sudo apt-get install -y \
		build-essential \
		curl \
		libbz2-dev \
		libexpat1-dev \
		libssl-dev \
		zlib1g-dev
endif

# Function to generate python source build rules - python_url
define PYTHON_RULE_FN
$(call PYTHON_NAME_FN, $(1))_SRC := $$(BUILD_SYS)/$(basename $(notdir $(1)))
$(call PYTHON_NAME_FN, $(1))_INSTALL := $$($(call PYTHON_NAME_FN, $(1))_SRC).sys
$(call PYTHON_NAME_FN, $(1))_BUILD := $$($(call PYTHON_NAME_FN, $(1))_SRC).build
$(call PYTHON_NAME_FN, $(1)) := $$($(call PYTHON_NAME_FN, $(1))_INSTALL)/bin/python$(if $(findstring Python-3.,$(1)),3) -E

$$($(call PYTHON_NAME_FN, $(1))_BUILD):
	mkdir -p $$(dir $$@)
	curl -s '$(strip $(1))' | tar xzC $$(dir $$@)
	cd $$($(call PYTHON_NAME_FN, $(1))_SRC) && \
		$(if $(OS_MAC), CPPFLAGS='-I/usr/local/opt/zlib/include -I/usr/local/opt/openssl/include') \
		$(if $(OS_MAC), LDFLAGS='-L/usr/local/opt/zlib/lib -L/usr/local/opt/openssl/lib') \
			./configure --prefix=$$(abspath $$($(call PYTHON_NAME_FN, $(1))_INSTALL)) && \
		make && \
		make install
	$$($(call PYTHON_NAME_FN, $(1))) -m ensurepip --default-pip
	$$($(call PYTHON_NAME_FN, $(1))) -m pip --disable-pip-version-check install --no-binary :all: virtualenv
	touch $$@
endef
$(foreach X, $(PYTHON_URLS), $(eval $(call PYTHON_RULE_FN, $(X))))

# Function to generate virtualenv rules - env_name, pip_args, commands, *python_url
define ENV_RULE
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))_ENV := $$(BUILD_ENV)/$(strip $(1))-$(basename $(notdir $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS)))))
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))_BUILD := $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))_ENV).build
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS)))) := $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))_ENV)/bin/python -E

$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))_BUILD): $$($(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))_BUILD)
	$$($(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))) -m virtualenv $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))_ENV)
	$(if $(PIP_ARGS)$(strip $(2)),$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))) -m pip --disable-pip-version-check install --no-binary :all: $(PIP_ARGS) $(2))
	touch $$@

.PHONY: $(strip $(1))_$(call LOWER_FN, $(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS)))))
$(strip $(1))_$(call LOWER_FN, $(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))): build
$(strip $(1))_$(call LOWER_FN, $(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))): $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))_BUILD)
$(call $(3), $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))_ENV), $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS))))))

.PHONY: $(strip $(1))
$(strip $(1)): _$(strip $(1))

.PHONY: _$(strip $(1))
_$(strip $(1)): $(strip $(1))$(call LOWER_FN, _$(call PYTHON_NAME_FN, $(if $(strip $(4)),$(4),$(firstword $(PYTHON_URLS)))))
endef

# Overridable build rule
.PHONY: build
build:

# Generate test rules
define TEST_COMMANDS_FN
	$(2) setup.py test $(if $(TEST),-s $(TEST))
endef
$(foreach X, $(PYTHON_URLS), $(eval $(call ENV_RULE, test, -e . -e .[tests], TEST_COMMANDS_FN, $(X))))

# Generate coverage rules
define COVER_COMMANDS_FN
	$(2) -m coverage run --branch --source $(PACKAGE_NAME) setup.py test $(if $(TEST),-s $(TEST))
	$(2) -m coverage html -d $(BUILD_COV)
	$(2) -m coverage report
	@echo
	@echo Coverage report is $(BUILD_COV)/index.html
endef
$(eval $(call ENV_RULE, cover, -e . -e .[tests] coverage==4.3.4, COVER_COMMANDS_FN))

# Generate doc rules
HAS_DOC = $(shell if [ -d doc ]; then echo 1; fi)
define DOC_COMMANDS_FN
ifneq '$(HAS_DOC)' ''
	$(1)/bin/sphinx-build -b html -d $(BUILD_DOC)/doctrees doc $(BUILD_DOC)/html
	@echo
	@echo Doc index is $(BUILD_DOC)/html/index.html
endif
endef
$(eval $(call ENV_RULE, doc, $(if $(HAS_DOC), sphinx==1.5.5), DOC_COMMANDS_FN))

# Generate pylint rules
define PYLINT_COMMANDS_FN
	$(2) -m pylint -j 0 $(PYLINT_ARGS) setup.py $(PACKAGE_NAME)
endef
$(eval $(call ENV_RULE, pylint, -e . pylint==1.6.5, PYLINT_COMMANDS_FN))
