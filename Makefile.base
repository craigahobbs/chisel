# -*- makefile-gmake -*-
# Licensed under the MIT License
# https://github.com/craigahobbs/chisel/blob/master/LICENSE

ifeq '$(PYTHON_VERSIONS)' ''
    $(error PYTHON_VERSIONS is not defined!)
endif

# Python pip option
PIP_ARGS ?= --no-cache-dir --disable-pip-version-check
PIP_INSTALL_ARGS ?= --progress-bar off

# coverage
COVERAGE_VERSION ?= 5.0.3
COVERAGE_REPORT_ARGS ?= --fail-under 100

# pylint
PYLINT_VERSION ?= 2.4.4
PYLINT_ARGS ?= -j 0

# sphinx
SPHINX_VERSION ?= 2.3.1
SPHINX_RTD_VERSION ?= git+https://github.com/readthedocs/sphinx_rtd_theme@a732d61
SPHINX_DOC ?=

# Build directory
BUILD := build

# Helper functions
LOWER_FN = $(strip $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,\
    $(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,\
    $(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$(1))))))))))))))))))))))))))))
UPPER_FN = $(strip $(subst a,A,$(subst b,B,$(subst c,C,$(subst d,D,$(subst e,E,$(subst f,F,$(subst g,G,$(subst h,H,$(subst i,I,\
    $(subst j,J,$(subst k,K,$(subst l,L,$(subst m,M,$(subst n,N,$(subst o,O,$(subst p,P,$(subst q,Q,$(subst r,R,$(subst s,S,\
    $(subst t,T,$(subst u,U,$(subst v,V,$(subst w,W,$(subst x,X,$(subst y,Y,$(subst z,Z,$(1))))))))))))))))))))))))))))
PYTHON_VERSION_FN = $(if $(strip $(1)),$(strip $(1)),$(firstword $(PYTHON_VERSIONS)))
PYTHON_NAME_FN = $(call UPPER_FN, Python_$(subst .,_,$(call PYTHON_VERSION_FN,$(1))))
PYTHON_IMAGE_FN = $(if $(ARCH),$(ARCH)/)python:$(call PYTHON_VERSION_FN,$(1))
PIP_VERSION_FN = $(if $(findstring git+,$(2)),-e $(strip $(2))\#egg=$(strip $(1)),$(strip $(1))==$(strip $(2)))

.PHONY: help
help: _help

.PHONY: _help
_help:
	@echo 'usage: make [clean|commit|cover|doc|pylint|test]'

.PHONY: commit
commit: test pylint doc cover

.PHONY: clean
clean: _clean

.PHONY: _clean
_clean:
	rm -rf \
		$(BUILD) \
		.coverage \
		$$(find src -name __pycache__) \
		dist/ \
		src/*.egg-info \
		*.eggs

.PHONY: superclean
superclean: clean _superclean

.PHONY: _superclean
_superclean:
	docker rmi -f $(foreach V, $(PYTHON_VERSIONS),$(call PYTHON_IMAGE_FN, $(V)))

# Function to generate venv rules - venv_name, pip_args, commands, *python_version, *docker_run_args
define VENV_RULE_FN
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_DIR := build/venv/$(strip $(1))-python-$(call PYTHON_VERSION_FN,$(4))
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_RUN := docker run --rm -u `id -u`:`id -g` -v $(abspath .):$(abspath .) -w $(abspath .) $(5) $(call PYTHON_IMAGE_FN,$(4))
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_CMD := $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_RUN) $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_DIR)/bin
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_BUILD := $$(BUILD)/venv/$(strip $(1))-python-$(call PYTHON_VERSION_FN,$(4)).build

$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_BUILD):
	mkdir -p $(BUILD)
	$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_RUN) python3 -m venv $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_DIR)
	$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_CMD)/pip -q $(PIP_ARGS) install --upgrade pip
	$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_CMD)/pip $(PIP_ARGS) install $(PIP_INSTALL_ARGS) $(2)
	touch $$@

.PHONY: $(strip $(1))_$(call LOWER_FN, $(call PYTHON_NAME_FN, $(4)))
$(strip $(1))_$(call LOWER_FN, $(call PYTHON_NAME_FN, $(4))): $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_BUILD)
$(call $(3), $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_VENV_CMD))

.PHONY: $(strip $(1))
$(strip $(1)): $(strip $(1))_$(call LOWER_FN, $(call PYTHON_NAME_FN, $(4)))
endef

# Generate test rules
define TEST_COMMANDS_FN
	$(1)/python3 -m unittest $(if $(TEST),-v $(TEST),discover -v -t src -s src/tests)
endef
$(foreach X, $(PYTHON_VERSIONS), $(eval $(call VENV_RULE_FN, test, -e . -e .[tests], TEST_COMMANDS_FN, $(X))))

# Generate coverage rules
define COVER_COMMANDS_FN
	$(1)/python3 -m coverage run --branch --source src -m unittest $(if $(TEST),-v $(TEST),discover -v -t src -s src/tests)
	$(1)/python3 -m coverage html -d $(BUILD)/coverage
	$(1)/python3 -m coverage report $(COVERAGE_REPORT_ARGS)
	@echo
	@echo Coverage report is $(BUILD)/coverage/index.html
endef
$(eval $(call VENV_RULE_FN, cover, -e . -e .[tests] $(call PIP_VERSION_FN, coverage, $(COVERAGE_VERSION)), COVER_COMMANDS_FN))

# Generate pylint rules
define PYLINT_COMMANDS_FN
	$(1)/python3 -m pylint $(PYLINT_ARGS) setup.py src
endef
$(eval $(call VENV_RULE_FN, pylint, -e . $(call PIP_VERSION_FN, pylint, $(PYLINT_VERSION)), PYLINT_COMMANDS_FN))

# Generate sphinx rules
ifneq '$(SPHINX_DOC)' ''
define DOC_COMMANDS_FN
	$(1)/sphinx-build -b html -d $(BUILD)/doc/doctrees $(SPHINX_DOC) $(BUILD)/doc/html
	@echo
	@echo Doc index is $(BUILD)/doc/html/index.html
endef
$(eval $(call VENV_RULE_FN, doc, $(call PIP_VERSION_FN, sphinx, $(SPHINX_VERSION)) $(call PIP_VERSION_FN, sphinx_rtd_theme, $(SPHINX_RTD_VERSION)), DOC_COMMANDS_FN))
else
.PHONY: doc
doc:
endif
