# -*- makefile-gmake -*-
# Copyright (C) 2012-2018 Craig Hobbs
#
# Licensed under the MIT License
# https://github.com/craigahobbs/chisel/blob/master/LICENSE

ifeq '$(PACKAGE_NAME)' ''
    $(error PACKAGE_NAME is not defined!)
endif
ifeq '$(PYTHON_VERSIONS)' ''
    $(error PYTHON_VERSIONS is not defined!)
endif

# Python pip option
PIP_ARGS ?= --no-cache-dir --disable-pip-version-check
PIP_INSTALL_ARGS ?= --no-binary :all: --progress-bar off

# coverage
COVERAGE_VERSION ?= 4.5.1
COVERAGE_REPORT_ARGS ?= --fail-under 100

# pylint
PYLINT_VERSION ?= 2.0.0.dev2
PYLINT_ARGS ?= -j 0

# sphinx
SPHINX_VERSION ?= 1.7.5

# Build directory
BUILD := build

# Helper functions
LOWER_FN = $(eval $(call LOWER_FN_CACHE, $(1)))$(__LOWER_FN__$(strip $(1))__)
UPPER_FN = $(eval $(call UPPER_FN_CACHE, $(1)))$(__UPPER_FN__$(strip $(1))__)
define LOWER_FN_CACHE
ifndef __LOWER_FN__$(strip $(1))__
__LOWER_FN__$(strip $(1))__ := $$(shell echo $(1) | tr '[:upper:]' '[:lower:]')
endif
endef
define UPPER_FN_CACHE
ifndef __UPPER_FN__$(strip $(1))__
__UPPER_FN__$(strip $(1))__ := $$(shell echo $(1) | tr '[:lower:]' '[:upper:]')
endif
endef
PYTHON_VERSION_FN = $(if $(strip $(1)),$(strip $(1)),$(firstword $(PYTHON_VERSIONS)))
PYTHON_NAME_FN = $(call UPPER_FN, Python_$(subst .,_,$(call PYTHON_VERSION_FN,$(1))))
PYTHON_IMAGE_FN = python:$(call PYTHON_VERSION_FN,$(1))-slim
PIP_VERSION_FN = $(if $(findstring git+,$(2)),-e $(strip $(2))\#egg=$(strip $(1)),$(strip $(1))==$(strip $(2)))

.PHONY: help
help: _help

.PHONY: _help
_help:
	@echo 'usage: make [test|pylint|doc|cover|commit|clean]'

.PHONY: commit
commit: test pylint doc cover

.PHONY: clean
clean: _clean

.PHONY: _clean
_clean:
	rm -rf \
		$(BUILD) \
		.coverage \
		.makefile \
		$$(find $(PACKAGE_NAME) -name '__pycache__') \
		dist \
		*.egg-info \
		*.egg

# Function to generate venv rules - env_name, pip_args, commands, *python_version, *docker_run_args
define ENV_RULE_FN
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_DIR := /build/venv/$(strip $(1))-python-$(call PYTHON_VERSION_FN,$(4))
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_RUN := docker run --rm -u $$(shell id -u):$$(shell id -u) -v $(abspath .):/src -v $(abspath $(BUILD)):/build -w /src $(5) $(call PYTHON_IMAGE_FN,$(4))
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_CMD := $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_RUN) $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_DIR)/bin
$(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_BUILD := $$(BUILD)/venv/$(strip $(1))-python-$(call PYTHON_VERSION_FN,$(4)).build

$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_BUILD):
	mkdir -p $(BUILD)
	if [ "$$$$(docker images -q $(call PYTHON_IMAGE_FN, $(4)))" = "" ]; then docker pull $(call PYTHON_IMAGE_FN,$(4)); fi
	$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_RUN) python3 -m venv $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_DIR)
	$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_CMD)/pip -q $(PIP_ARGS) install --upgrade pip
	$$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_CMD)/pip $(PIP_ARGS) install $(PIP_INSTALL_ARGS) $(2)
	touch $$@

.PHONY: $(strip $(1))_$(call LOWER_FN, $(call PYTHON_NAME_FN, $(4)))
$(strip $(1))_$(call LOWER_FN, $(call PYTHON_NAME_FN, $(4))): $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_BUILD)
$(call $(3), $$($(call UPPER_FN, $(1))_$(call PYTHON_NAME_FN, $(4))_ENV_CMD))

.PHONY: $(strip $(1))
$(strip $(1)): $(strip $(1))_$(call LOWER_FN, $(call PYTHON_NAME_FN, $(4)))
endef

# Generate test rules
define TEST_COMMANDS_FN
	$(1)/python3 setup.py test $(if $(TEST),-s $(TEST))
endef
$(foreach X, $(PYTHON_VERSIONS), $(eval $(call ENV_RULE_FN, test, -e ., TEST_COMMANDS_FN, $(X))))

# Generate coverage rules
define COVER_COMMANDS_FN
	$(1)/python3 -m coverage run --branch --source $(PACKAGE_NAME) setup.py test $(if $(TEST),-s $(TEST))
	$(1)/python3 -m coverage html -d $(BUILD)/coverage
	$(1)/python3 -m coverage report $(COVERAGE_REPORT_ARGS)
	@echo
	@echo Coverage report is $(BUILD)/coverage/index.html
endef
$(eval $(call ENV_RULE_FN, cover, -e . $(call PIP_VERSION_FN, coverage, $(COVERAGE_VERSION)), COVER_COMMANDS_FN))

# Generate pylint rules
define PYLINT_COMMANDS_FN
	$(1)/python3 -m pylint $(PYLINT_ARGS) setup.py $(PACKAGE_NAME)
endef
$(eval $(call ENV_RULE_FN, pylint, -e . $(call PIP_VERSION_FN, pylint, $(PYLINT_VERSION)), PYLINT_COMMANDS_FN))

# Generate sphinx rules
HAS_DOC := $(shell if [ -d doc ]; then echo 1; fi)
ifneq '$(HAS_DOC)' ''
define DOC_COMMANDS_FN
	$(1)/sphinx-build -b html -d $(BUILD)/doc/doctrees doc $(BUILD)/doc/html
	@echo
	@echo Doc index is $(BUILD)/doc/html/index.html
endef
$(eval $(call ENV_RULE_FN, doc, $(call PIP_VERSION_FN, sphinx, $(SPHINX_VERSION)), DOC_COMMANDS_FN))
else
.PHONY: doc
doc:
endif
